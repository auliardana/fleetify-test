// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/auliardana/fleetify-test/internal/repository (interfaces: AttendanceHistoryRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/auliardana/fleetify-test/internal/entity"
	model "github.com/auliardana/fleetify-test/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAttendanceHistoryRepository is a mock of AttendanceHistoryRepository interface.
type MockAttendanceHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceHistoryRepositoryMockRecorder
}

// MockAttendanceHistoryRepositoryMockRecorder is the mock recorder for MockAttendanceHistoryRepository.
type MockAttendanceHistoryRepositoryMockRecorder struct {
	mock *MockAttendanceHistoryRepository
}

// NewMockAttendanceHistoryRepository creates a new mock instance.
func NewMockAttendanceHistoryRepository(ctrl *gomock.Controller) *MockAttendanceHistoryRepository {
	mock := &MockAttendanceHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockAttendanceHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceHistoryRepository) EXPECT() *MockAttendanceHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAttendanceHistoryRepository) Create(arg0 context.Context, arg1 *entity.AttendanceHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAttendanceHistoryRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendanceHistoryRepository)(nil).Create), arg0, arg1)
}

// GetFilteredAttendanceHistories mocks base method.
func (m *MockAttendanceHistoryRepository) GetFilteredAttendanceHistories(arg0 context.Context, arg1 *model.AttendanceHistoryFilter) ([]entity.AttendanceHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredAttendanceHistories", arg0, arg1)
	ret0, _ := ret[0].([]entity.AttendanceHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredAttendanceHistories indicates an expected call of GetFilteredAttendanceHistories.
func (mr *MockAttendanceHistoryRepositoryMockRecorder) GetFilteredAttendanceHistories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredAttendanceHistories", reflect.TypeOf((*MockAttendanceHistoryRepository)(nil).GetFilteredAttendanceHistories), arg0, arg1)
}

// GetMaxClockTimeByEmployeeID mocks base method.
func (m *MockAttendanceHistoryRepository) GetMaxClockTimeByEmployeeID(arg0 uuid.UUID) (*model.MaxClockTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxClockTimeByEmployeeID", arg0)
	ret0, _ := ret[0].(*model.MaxClockTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxClockTimeByEmployeeID indicates an expected call of GetMaxClockTimeByEmployeeID.
func (mr *MockAttendanceHistoryRepositoryMockRecorder) GetMaxClockTimeByEmployeeID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxClockTimeByEmployeeID", reflect.TypeOf((*MockAttendanceHistoryRepository)(nil).GetMaxClockTimeByEmployeeID), arg0)
}
